// 암호 만들기
// 백트래킹
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

int L, C;
char str[16];
bool isVisited[16];

vector<string> answer;

//자음과 모음 개수 확인
bool check(string str) {
	int v_cnt = 0;
	for (int i = 0; i < L; i++) {
		if (str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u')
			v_cnt++;

	}
	if (v_cnt >= 1 && L - v_cnt >= 2)
		return true;
	return false;
}

void backtracking(string temp, int cnt, int curr) {
	if (cnt == L) {
		if (check(temp)) {
			answer.push_back(temp);
		}
		return;
	}

	//i = curr로 설정하여 정렬된 문자만 생성 
	for (int i = curr; i < C; i++) {
		if (!isVisited[i]) {
			isVisited[i] = true;
			backtracking(temp + str[i], cnt+1, i);
			isVisited[i] = false;
		}
	}

}

int main() {

	scanf("%d %d", &L, &C);
	for (int i = 0; i < C; i++) {
		scanf(" %c", &str[i]);
	}

	sort(str, str + C);

	backtracking("", 0, 0);

	for (int i = 0; i < answer.size(); i++) {
		printf("%s\n", answer[i].c_str());//c-style의 string으로 변환해서 출력
	}

	return 0;
}
