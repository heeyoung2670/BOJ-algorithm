//상어 중학교
//구현, bfs
#include <iostream>
#include <cstring>
#include <queue>

using namespace std;

int N, M; //격자의 크기, 색상의 개수
int map[21][21];
bool visited[21][21];
int answer = 0;

int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

struct Block
{
	int x, y, count, rainbow;
	Block() {};
	Block(int x, int y, int cnt, int r) : x(x), y(y), count(cnt), rainbow(r) {};
	bool operator <(const Block b) const {
		if (count == b.count) {
			if (rainbow == b.rainbow) {
				if (x == b.x) return y < b.y;
				return x < b.x;
			}
			return rainbow < b.rainbow;
		}
		return count < b.count; //내림차순 정렬
	}
};

struct Block bfs(int x, int y, int target) {
	queue<pair<int, int>> q;
	
	Block block = { x, y, 1, 0 };
	bool check[21][21] = { false, }; //무지개 블록 방문 체크

	q.push({ x, y });
	visited[x][y] = true;
	while (!q.empty())
	{
		x = q.front().first;
		y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
			if (map[nx][ny] == -1 || map[nx][ny] == -2) continue;
			if (!visited[nx][ny] && map[nx][ny] == target) {
				visited[nx][ny] = true;
				q.push({ nx, ny });
				block.count++;
			}
			if (!check[nx][ny] && map[nx][ny] == 0) { //무지개 블록
				check[nx][ny] = true;
				q.push({ nx, ny });
				block.count++;
				block.rainbow++;
			}
		}
	}

	return block;
}

void erase(Block block) {
	
	int target = map[block.x][block.y];

	queue<pair<int, int>> q;
	bool check[21][21] = { false, };

	q.push({ block.x, block.y });
	check[block.x][block.y] = true;
	map[block.x][block.y] = -2;
	answer += block.count * block.count; //점수 획득
	while (!q.empty())
	{
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
			if (check[nx][ny] || map[nx][ny] == -1 || map[nx][ny] == -2) continue;
			if (map[nx][ny] == target || map[nx][ny] == 0) {
				map[nx][ny] = -2; //제거된 블록
				check[nx][ny] = true;
				q.push({ nx, ny });
			}
		}
	}

	return;
}

void swap(int x1, int y1, int x2, int y2) {
	int temp = map[x1][y1];
	map[x1][y1] = map[x2][y2];
	map[x2][y2] = temp;
	return;
}

void gravity() {
	for (int i = N - 2; i >= 0; i--) {
		for (int j = 0; j < N; j++) {
			if (map[i][j] >= 0 && map[i + 1][j] == -2) {
				int x = i;
				while (x < N - 1 && map[x + 1][j] == -2) {
					swap(x, j, x + 1, j);
					x++;
				}
			}
		}
	}
	return;
}

void rotate() {
	int rotation[21][21] = { 0, };
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			rotation[i][j] = map[j][(N - 1) - i];
		}
	}
	//원래 map으로 이동
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			map[i][j] = rotation[i][j];
		}
	}
	return;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
		}
	}

	while (true)
	{
		priority_queue<Block> pq;
		memset(visited, false, sizeof(visited));

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (map[i][j] == -2 || map[i][j] == -1 || map[i][j] == 0) continue;
				if (visited[i][j]) continue;
				Block block = bfs(i, j, map[i][j]); //블록 그룹 찾기
				if (block.count >= 2) pq.push(block); //블록의 개수는 2보다 크거나 같아야 함
			}
		}

		if (pq.empty()) break; //남은 블록 그룹 없음

		erase(pq.top()); //그룹의 모든 블록 제거

		gravity(); //중력 작용
		rotate(); //반시계 회전	
		gravity(); //중력 작용
	}

	cout << answer << "\n";

	return 0;
}
