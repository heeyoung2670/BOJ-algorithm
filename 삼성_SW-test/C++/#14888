//연산자 끼워넣기
//백트래킹
#include <iostream>
#include <algorithm>

using namespace std;

#define MAX 1000000000

int N;
int nums[11]; //정수
int oper[4]; //덧셈, 뺄셈, 곱셈, 나눗셈의 개수
int max_answer = -MAX;
int min_answer = MAX;

void backtracking(int i, int temp, int cnt) {
	if (cnt == N) {
		max_answer = max(max_answer, temp);
		min_answer = min(min_answer, temp);
		return;
	}

	if (oper[0] != 0) {
		oper[0]--;
		backtracking(i + 1, temp + nums[i], cnt + 1); //더하기
		oper[0]++;
	}
	if (oper[1] != 0) {
		oper[1]--;
		backtracking(i + 1, temp - nums[i], cnt + 1); //빼기
		oper[1]++;
	}
	if (oper[2] != 0) {
		oper[2]--;
		backtracking(i + 1, temp * nums[i], cnt + 1); //곱하기
		oper[2]++;
	}
	if (oper[3] != 0) {
		oper[3]--;
		backtracking(i + 1, temp / nums[i], cnt + 1); //나누기
		oper[3]++;
	}

	return;
}

int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> N;
	for (int i = 0; i < N; i++) cin >> nums[i];
	for (int i = 0; i < 4; i++) cin >> oper[i];

	backtracking(1, nums[0], 1);

	printf("%d\n%d\n", max_answer, min_answer);

	return 0;
}
