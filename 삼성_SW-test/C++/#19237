//어른 상어
//구현
#include <iostream>
#include <vector>
#include <deque>

using namespace std;

struct Smell
{
	int shark; //상어 번호
	int count; //남은 초
};

struct SHARK
{
	int x; int y; //현재 위치
	int dir; //상어가 현재 바라보고 있는 방향
}Shark[401];//상어 구조체

int N, M, K; //격자 크기, 상어 수, 냄새가 남아있는 시간
int map[21][21];
Smell visited[21][21]; //상어 냄새 저장
bool shark_in[401] = { false, }; //퇴출 상어 체크

vector<int> priority[401][5]; //방향 우선순위

//위, 아래, 왼쪽, 오른쪽
int dx[5] = { 0, -1, 1, 0, 0 };
int dy[5] = { 0, 0, 0, -1, 1 };

void move(int shark) {
	int x = Shark[shark].x;
	int y = Shark[shark].y;
	int dir = Shark[shark].dir;

	for (int i = 0; i < 4; i++) {
		int d = priority[shark][dir][i]; //우선순위대로 확인
		int nx = x + dx[d];
		int ny = y + dy[d];
		if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
		if (visited[nx][ny].count == 0) {
			//상어 이동
			map[x][y] = 0;
			if (map[nx][ny] > 0) shark_in[map[nx][ny]] = false; //숫자가 큰 상어 퇴출
			map[nx][ny] = shark;
			Shark[shark].x = nx;
			Shark[shark].y = ny;
			//방향 전환
			Shark[shark].dir = d;
			return;
		}
	}

	//아무 냄새가 없는 칸이 없다면
	for (int i = 0; i < 4; i++) {
		int d = priority[shark][dir][i];
		int nx = x + dx[d];
		int ny = y + dy[d];
		if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
		if (visited[nx][ny].shark == shark) {
			map[x][y] = 0;
			map[nx][ny] = shark;
			Shark[shark].x = nx;
			Shark[shark].y = ny;
			Shark[shark].dir = d;
			return;
		}
	}
	return;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M >> K;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
			if (map[i][j] > 0) {
				//상어 위치
				Shark[map[i][j]].x = i;
				Shark[map[i][j]].y = j;
				//시작 위치에 냄새뿌림
				visited[i][j].shark = map[i][j];
				visited[i][j].count = K;
			}
		}
	}
	int num;
	for (int i = 1; i <= M; i++) { //1: 위, 2: 아래, 3: 왼쪽, 4: 오른쪽
		cin >> num;
		Shark[i].dir = num;
		shark_in[i] = true; //상어 초기화
	}
	for (int i = 1; i <= M; i++) { //상어 당 4줄씩
		for (int j = 1; j <= 4; j++) { //위, 아래, 왼쪽, 오른쪽
			for (int k = 0; k < 4; k++) {
				cin >> num;
				priority[i][j].push_back(num);
			}
		}
	}

	int time = 0;
	while (time <= 1000)
	{
		time++;
		
		//번호가 큰 상어부터 이동
		for (int i = M; i > 0; i--) {
			if(shark_in[i]) move(i); //상어가 칸 안에 있는 경우만
		}

		//1번 상어만 남았는지 확인
		bool check = true;
		for (int i = 2; i <= M; i++) {
			if (shark_in[i]) {
				check = false;
				break;
			}
		}
		if (check) break; //1번 상어만 남았다면 break

		//k초 후 냄새 사라짐
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (visited[i][j].count > 0) visited[i][j].count--;
				if (visited[i][j].count == 0)visited[i][j].shark = 0;
			}
		}

		//이동한 칸에 냄새 뿌림
		for (int i = 1; i <= M; i++) {
			if (shark_in[i]) {
				visited[Shark[i].x][Shark[i].y].shark = i;
				visited[Shark[i].x][Shark[i].y].count = K;
			}
		}
	}

	if (time > 1000) cout << -1 << "\n";
	else cout << time << "\n";

	return 0;
}
