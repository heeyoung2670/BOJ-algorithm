//스타트와 링크
//백트래킹, 조합
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int N;
int map[21][21] = { 0, };

vector<int> v;
vector<vector<int>> combi; //조합 저장할 벡터
vector<int> combi_score;

int answer = 2000; //정답 계산

void backtracking(int idx, int cnt) { //조합 구현
	if (cnt == N / 2) {
		combi.push_back(v);
		return;
	}
	for (int i = idx; i <= N; i++) {
		v.push_back(i);
		backtracking(i + 1, cnt + 1);
		v.pop_back();
	}
	return;
}

void cal() { //해당 조합의 능력치 계산
	for (int c = 0; c < combi.size(); c++) {
		vector<int> temp = combi.at(c);
		int add = 0;
		for (int i = 0; i < temp.size()-1; i++) {
			for (int j = i+1; j < temp.size(); j++) {
				add += map[temp[i]][temp[j]] + map[temp[j]][temp[i]];
			}
		}
		combi_score.push_back(add);
	}
}

int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);
	
	cin >> N;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> map[i][j];
		}
	}

	backtracking(1, 0); //idx, cnt
	cal();

	for (int i = 0, j = combi.size()-1; i < combi.size()/2; i++, j--) {
		answer = min(answer, abs(combi_score[i] - combi_score[j]));
	}

	printf("%d\n", answer);

	return 0;
}
