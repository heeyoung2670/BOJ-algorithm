//상어 초등학교
#include <iostream>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>

using namespace std;

int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

int N;
int num, a, b, c, d;
int map[21][21]; //인접한 칸 중 비어있는 자리의 개수
int choice[21][21]; //자리 배정 결과

struct Data {
	int i, j, cnt;
	Data() {};
	Data(int i, int j, int cnt) :i(i), j(j), cnt(cnt) {};
	bool operator<(const Data& d) const {
		if (cnt == d.cnt) {
			if (i == d.i) return j > d.j;
			else return i > d.i;
		}
		else return cnt < d.cnt;
	}
};

int check(int x, int y) {

	int nx, ny;
	int count = 0;
	for (int i = 0; i < 4; i++) {
		nx = x + dx[i];
		ny = y + dy[i];
		if (0 <= nx && nx < N && 0 <= ny && ny < N) {
			if (choice[nx][ny] == a || choice[nx][ny] == b || choice[nx][ny] == c || choice[nx][ny] == d) {
				count++;
			}
		}
	}

	return count;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int answer = 0; //전체 만족도 합
	memset(map, 0, sizeof(map));
	memset(choice, 0, sizeof(choice));

	cin >> N;

	//비어있는 칸 개수 저장
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (0 <= i - 1) map[i][j]++;
			if (i + 1 < N) map[i][j]++;
			if (0 <= j - 1) map[i][j]++;
			if (j + 1 < N) map[i][j]++;
		}
	}

	//학생 자리 배정 구현
	vector<int> v[401];

	for (int t = 0; t < N*N; t++) {

		cin >> num >> a >> b >> c >> d;

		//좋아하는 사람 벡터에 저장
		v[num].push_back(a);
		v[num].push_back(b);
		v[num].push_back(c);
		v[num].push_back(d);

		int count[21][21];
		memset(count, -1, sizeof(count));
		int max_cnt = 0;

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (choice[i][j] == 0) { //choice[i][j]에 값이 있다면 이미 배정된 자리
					count[i][j] = check(i, j); //(i, j)와 인접한 칸에 좋아하는 학생 수 체크
					max_cnt = max(max_cnt, count[i][j]);
				}
			}
		}

		priority_queue<Data> pq;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (count[i][j] == max_cnt) { //좋아하는 학생이 많은 칸이 여러개일 경우
					pq.push(Data(i, j, map[i][j])); //i, j, 비어있는 칸 개수
				}
			}
		}

		Data d = pq.top(); //우선순위 큐 사용
		int x = d.i, y = d.j;

		choice[x][y] = num; //(x, y)에 학생 번호 저장
		map[x][y] = 0;
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (0 <= nx && nx < N && 0 <= ny && ny < N) {
				if (map[nx][ny] == 0) continue;
				map[nx][ny]--; //인접한 칸에 비어있는 칸 하나씩 제거
			}
		}

	}

	//만족도 계산
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			int count = 0;
			for (int k = 0; k < 4; k++) {
				int nx = i + dx[k];
				int ny = j + dy[k];
				if (0 <= nx && nx < N && 0 <= ny && ny < N) {
					if (choice[nx][ny] == v[choice[i][j]][0] || choice[nx][ny] == v[choice[i][j]][1] || choice[nx][ny] == v[choice[i][j]][2] || choice[nx][ny] == v[choice[i][j]][3]) {
						count++;
					}
				}
			}
			if (count == 0) {
				answer += 0;
			}
			else if (count == 1) {
				answer += 1;
			}
			else if (count == 2) {
				answer += 10;
			}
			else if (count == 3) {
				answer += 100;
			}
			else if (count == 4) {
				answer += 1000;
			}
		}
	}

	printf("%d\n", answer);

	return 0;
}
