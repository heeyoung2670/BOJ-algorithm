//마법사 상어와 파이어스톰
//구현, bfs
#include <iostream>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <queue>

using namespace std;

int N, Q, L;
int map[64][64];
int rotation[64][64];
bool visited[64][64];

int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

int answer = 0;
int max_ans = 0;

void bfs(int x, int y) {

	queue<pair<int, int>> q;
	int nx, ny, cnt;

	q.push({ x, y });
	visited[x][y] = true;
	cnt = 1;
	answer += map[x][y];
	while (!q.empty())
	{
		x = q.front().first;
		y = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++) {
			nx = x + dx[i];
			ny = y + dy[i];
			if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
			if (!visited[nx][ny] && map[nx][ny] > 0) {
				visited[nx][ny] = true;
				q.push({ nx, ny });
				cnt++; //가장 큰 덩어리 칸의 개수
				answer += map[nx][ny]; //남아있는 얼음의 합
			}
		}
	}
	max_ans = max(max_ans, cnt);
}

void rotate(int x, int y) {
	for (int i = 0; i < L; i++) {
		for (int j = 0; j < L; j++) {
			rotation[x + i][y + j] = map[(L - 1) + x - j][y + i];
		}
	}
}

void init() {
	N = 0; Q = 0; L = 0;
	memset(map, 0, sizeof(map));
	memset(rotation, 0, sizeof(rotation));
	memset(visited, false, sizeof(visited));
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	init(); //변수 초기화

	cin >> N >> Q;
	N = pow(2, N);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
		}
	}

	while (Q--) //파이어스톰
	{
		cin >> L;
		L = pow(2, L);
		
		//시계 방향으로 90도 회전
		for (int i = 0; i < N; i = i + L) {
			for (int j = 0; j < N; j = j + L) {
				rotate(i, j);
			}
		}

		//얼음의 양 줄어듬
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				//인접한 칸 확인
				int cnt = 0;
				for (int k = 0; k < 4; k++) {
					int nx = i + dx[k];
					int ny = j + dy[k];
					if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
					if (rotation[nx][ny] > 0) cnt++;
				}
				if (cnt < 3) map[i][j] = rotation[i][j] - 1; //인접한 칸의 얼음이 3개보다 적으면 얼음의 양 1 줄어듬
				else map[i][j] = rotation[i][j]; //아니라면 rotation 변수 map 배열에 옮김
			}
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (!visited[i][j] && map[i][j] > 0) bfs(i, j); //얼음이 존재한다면 방문
		}
	}

	cout << answer << "\n" << max_ans << "\n";

	return 0;
}
