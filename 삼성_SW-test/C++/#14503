//로봇 청소기
//구현, 
#include <iostream>
#include <queue>

using namespace std;

int N, M; //세로, 가로
int r, c, d; //좌표, 바라보는 방향(북쪽: 0, 동쪽: 1, 남쪽: 2, 서쪽: 3)
int map[51][51];
int visited[51][51];
int answer = 0;

//북, 동, 남, 서
int dr[4] = {-1, 0, 1, 0};
int dc[4] = {0, 1, 0, -1};

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M;
	cin >> r >> c >> d;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
		}
	}

	queue<pair<pair<int, int>, int>> q;
	q.push({{r, c}, d}); //로봇 청소기 시작 지점
	while (!q.empty())
	{
		r = q.front().first.first;
		c = q.front().first.second;
		d = q.front().second;
		q.pop();
		visited[r][c] = 1; //방문 처리
		bool check = false;
		for (int i = 0; i < 4; i++) {
			int nr = r + dr[(d + 3) % 4];
			int nc = c + dc[(d + 3) % 4];
			//범위를 벗어난 경우, 이미 방문한 경우, 벽인 경우
			if (nr < 0 || nr >= N || nc < 0 || nc >= M || visited[nr][nc] || map[nr][nc] == 1) {
				d = (d + 3) % 4; //회전만 실행
				continue;
			}
			if (!visited[nr][nc] && map[nr][nc] == 0) { //아직 청소하지 않은 빈 공간이 존재한다면
				q.push({ {nr, nc}, (d + 3) % 4 }); //방문
				check = true;
				break;
			}
		}
		if (!check) { //연속 네 번 실행되었을 경우
			int nr = r + dr[(d + 2) % 4];
			int nc = c + dc[(d + 2) % 4];
			if (map[nr][nc] == 1) break; //뒤쪽이 벽이라면 작동 중지
			else q.push({ {nr, nc}, d }); //아니라면 한칸 후진
		}
	}

	//청소한 칸의 개수
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (visited[i][j] == 1) answer++;
		}
	}

	cout << answer << "\n";
	
	return 0;
}
