//마법사 상어와 비바라기
//구현
#include <iostream>
#include <queue>
#include <cstring>

using namespace std;

//8개 방향으로 구름이 이동
int dx[8] = {0, -1, -1, -1, 0, 1, 1, 1};
int dy[8] = {-1, -1, 0, 1, 1, 1, 0, -1};

//대각선 정의
int x[4] = {-1, -1, 1, 1};
int y[4] = {1, -1, 1, -1};

int N, M;
int map[51][51] = {0, };
int temp[51][51] = { 0, };
int d, s;
queue<pair<int, int>> cloud;

int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	//입력
	cin >> N >> M;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> map[i][j];
		}
	}

	//처음 시작하는 구름의 위치
	cloud.push({ N, 1 });
	cloud.push({ N, 2 });
	cloud.push({ N - 1, 1 });
	cloud.push({ N - 1, 2 });

	while (M--)
	{
		memset(temp, 0, sizeof(temp)); //물복사버그 마법을 저장할 배열

		cin >> d >> s; //방향, 거리

		//모든 구름이 이동
		for (int i = 0; i < cloud.size(); i++) {
			int nx = (cloud.front().first + dx[d-1] * s) % N;
			if (nx <= 0) nx += N;
			int ny = (cloud.front().second + dy[d-1] * s) % N;
			if (ny <= 0) ny += N;
			cloud.pop();

			map[nx][ny]++; //비가 1씩 내림
			cloud.push({ nx, ny });
		}

		//물복사버그 마법
		while(!cloud.empty()) {
			int nx = cloud.front().first;
			int ny = cloud.front().second;
			cloud.pop();

			int cnt = 1;
			for (int j = 0; j < 4; j++) {
				if (nx + x[j] < 1 || nx + x[j] > N || ny + y[j] < 1 || ny + y[j] > N) continue; //경계를 넘어가는 칸은 대각선 방향으로 거리가 1이 아니다.
				if (map[nx + x[j]][ny + y[j]] > 0) cnt++;
			}

			temp[nx][ny] = cnt;
		}

		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				if (temp[i][j] == 0 && map[i][j] >= 2) { //물의 양이 2이상이면 다음 구름 생성
					cloud.push({ i, j });
					map[i][j] -= 2;
				}
				else if (temp[i][j] != 0) { //구름이 지나간 칸은 구름이 생기지 않음
					map[i][j] += temp[i][j] - 1; //대각선 
				}
			}
		}
	}

	//물의 합 구하기
	int answer = 0;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			answer += map[i][j];
		}
	}
	cout << answer;

	return 0;
}
