//연구소 3
//구현, bfs
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>

using namespace std;

int N, M;
int map[51][51];
int empty_place = 0;
vector<pair<int, int>> virus;
vector<int> choice;
int visited[51][51];

int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

int answer = 2500;

void bfs() {
	queue<pair<int, int>> q;
	memset(visited, -1, sizeof(visited));

	for (int i = 0; i < choice.size(); i++) {
		q.push({virus[choice[i]].first, virus[choice[i]].second});
		visited[virus[choice[i]].first][virus[choice[i]].second] = 0;
	}

	int x, y, nx, ny;
	int time = 0, place = 0;
	while (!q.empty())
	{

		x = q.front().first;
		y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			nx = x + dx[i];
			ny = y + dy[i];
			if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue; //범위 벗어남
			if (visited[nx][ny] != -1 || map[nx][ny] == 1) continue; //이미 방문했거나 벽인 경우

			//방문하지 않았다면
			visited[nx][ny] = visited[x][y] + 1;
			if (map[nx][ny] == 0) {
				place++;
				time = visited[nx][ny];
			}
			q.push({ nx, ny });
		}
	}

	if(place == empty_place) answer = min(answer, time);

	return;
}

void backtracking(int idx, int cnt) {
	if (cnt == M) {
		return bfs(); //선택한 바이러스로 탐색
	}

	for (int i = idx; i < virus.size(); i++) {
		choice.push_back(i);
		backtracking(i + 1, cnt + 1); //활성화 할 바이러스 선택
		choice.pop_back();
	}

	return;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
			if (map[i][j] == 2) virus.push_back({ i, j });
			else if (map[i][j] == 0) empty_place++;
		}
	}

	backtracking(0, 0);

	if (answer == 2500) cout << -1 << "\n"; //모든 칸을 감염 못하는 경우
	else cout << answer << "\n";

	return 0;
}
