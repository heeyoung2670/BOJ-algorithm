//원판 돌리기
//구현
#include <iostream>
#include <vector>
#include <deque>
#include <cstring>
#include <queue>

using namespace std;

int N, M, T; //원판의 개수, 원판에 적힌 수의 개수, 회전 수

vector<deque<int>> v; //원판
bool isvisited[51][51];

void rotate(int x, int d, int k) {
	for (int i = 0; i < N; i++) {
		if ((i + 1) % x == 0) { //x의 배수인 원판
			if (d == 0) { //시계 방향
				for (int j = 0; j < k; j++) { //k번 회전
					v[i].push_front(v[i].back());
					v[i].pop_back();
				}
			}
			else if (d == 1) { //반시계 방향
				for (int j = 0; j < k; j++) {
					v[i].push_back(v[i].front());
					v[i].pop_front();
				}
			}
		}
	}
}

int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

int bfs(int i, int j, int target) {
	queue<pair<int, int>> q;

	q.push({ i, j });
	isvisited[i][j] = true;
	int cnt = 1;
	while (!q.empty())
	{
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = (y + dy[i] + M) % M; //(i, 1)은 (i, 2), (i, M)과 인접
			if (nx < 0 || ny < 0 || nx >= N || ny >= M) continue; //범위 벗어남
			if (isvisited[nx][ny] || v[nx][ny] == 0) continue;
			if (v[nx][ny] == target) {
				isvisited[nx][ny] = true;
				v[nx][ny] = 0;
				q.push({ nx, ny });
				cnt++;
			}
		}

	}
	if (cnt > 1) v[i][j] = 0; //(i, j)에 인접한 수가 있는 경우

	return cnt; //인접한 수의 개수 반환
}

void change() {
	double avg = 0;
	int cnt = 0;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (v[i][j] != 0) {
				avg += v[i][j];
				cnt++;
			}
		}
	}

	avg /= cnt; //원판에 적힌 수의 평균
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (v[i][j] == 0) continue;
			if (v[i][j] > avg) v[i][j]--; //평균보다 큰 수
			else if (v[i][j] < avg) v[i][j]++; //평균보다 작은 수
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M >> T;

	int num;
	for (int i = 0; i < N; i++) {
		deque<int> dq;
		for (int j = 0; j < M; j++) {
			cin >> num;
			dq.push_back(num);
		}
		v.push_back(dq);
	}

	int x, d, k; //x의 배수인 원판을 d방향으로 k칸 회전
	while (T--)
	{
		cin >> x >> d >> k;

		rotate(x, d, k);

		memset(isvisited, false, sizeof(isvisited));
		bool check = false; //인접한 수 있는지 확인
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (v[i][j] == 0) continue; //0이라면 지워진 수
				if (!isvisited[i][j]) {
					if (bfs(i, j, v[i][j]) > 1) check = true;
				}
			}
		}

		if (!check) change(); //인접한 수가 없는 경우
	}

	int answer = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			answer += v[i][j];
		}
	}

	cout << answer << "\n"; //원판에 적힌 수 출력

	return 0;
}
