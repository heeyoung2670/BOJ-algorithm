//뱀
//구현, 덱
#include <iostream>
#include <deque>

using namespace std;

int N, K; //보드의 크기, 사과의 개수
int map[101][101];
int L; //방향 변환 횟수
char time[10001]; //게임 시작 시간부터 X초

int dx[4] = {0, 1, 0, -1};
int dy[4] = {1, 0, -1, 0};

deque<pair<int, int>> dq;
bool visited[101][101]; //뱀 몸통 저장
int i = 0; //현재 가는 방향
int nx, ny;
bool check;

int answer = 0;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> K;
	for (int i = 0; i < K; i++) {
		int r, c;
		cin >> r >> c;
		map[r][c] = 1; //사과 위치
	}

	cin >> L;
	for (int i = 0; i < L; i++) {
		int X;
		char C; //'D'는 오른쪽, 'L'은 왼쪽
		cin >> X >> C;
		time[X] = C;
	}

	dq.push_back({ 1, 1 }); //시작 좌표
	visited[1][1] = true; //몸이 있는 위치

	while (true)
	{
		check = false;
		answer++; //시간 계산

		nx = dq.front().first + dx[i];
		ny = dq.front().second + dy[i];

		//벽에 닿는 경우
		if (nx <= 0 || ny <= 0 || nx > N || ny > N) break;

		//자신의 몸에 닿는 경우
		if (visited[nx][ny]) break;

		dq.push_front({ nx, ny }); //나아갈 방향
		visited[nx][ny] = true;
		if (map[nx][ny] == 0) { //사과가 없다면 몸길이 줄임
			visited[dq.back().first][dq.back().second] = false;
			dq.pop_back();
		}
		else if (map[nx][ny] == 1) map[nx][ny] = 0; //사과가 있다면 사과 먹음
		

		//방향 전환
		if (time[answer] == 'L') i = (i + 3) % 4;
		else if (time[answer] == 'D') i = (i + 1) % 4;
	}

	cout << answer << "\n";

	return 0;
}
