//테트로미노
//브루트-포스
#include <iostream>
#include <algorithm>

using namespace std;

int N, M;
int map[501][501];
bool visited[501][501];
int answer = 0;

void backtracking(int x, int y, int ans, int cnt) {
	if (cnt == 4) {
		answer = max(answer, ans);
		return;
	}

	if (x < 0 || x >= N || y < 0 || y >= M) return;

	if (!visited[x + 1][y]) {
		visited[x + 1][y] = true;
		backtracking(x + 1, y, ans + map[x + 1][y], cnt + 1);
		visited[x + 1][y] = false;
	}
	if (!visited[x][y + 1]) {
		visited[x][y + 1] = true;
		backtracking(x, y + 1, ans + map[x][y + 1], cnt + 1);
		visited[x][y + 1] = false;
	}
	if (!visited[x - 1][y]) {
		visited[x - 1][y] = true;
		backtracking(x - 1, y, ans + map[x - 1][y], cnt + 1);
		visited[x - 1][y] = false;
	}
	if (!visited[x][y - 1]) {
		visited[x][y - 1] = true;
		backtracking(x, y - 1, ans + map[x][y - 1], cnt + 1);
		visited[x][y - 1] = false;
	}

	return;
}
//ㅜ모양
void tetro1(int x, int y) {
	if (x + 1 >= N || y + 2 >= M) return;
	answer = max(answer, map[x][y] + map[x][y + 1] + map[x + 1][y + 1] + map[x][y + 2]);
}
//ㅏ모양
void tetro2(int x, int y) {
	if (x + 2 >= N || y + 1 >= M) return;
	answer = max(answer, map[x][y] + map[x + 1][y] + map[x + 1][y + 1] + map[x + 2][y]);
}
//ㅓ모양
void tetro3(int x, int y) {
	if (x + 2 >= N || y - 1 < 0) return;
	answer = max(answer, map[x][y] + map[x + 1][y] + map[x + 1][y - 1] + map[x + 2][y]);
}
//ㅗ모양
void tetro4(int x, int y) {
	if (x - 1 < 0 || y + 2 >= M) return;
	answer = max(answer, map[x][y] + map[x - 1][y + 1] + map[x][y + 1] + map[x][y + 2]);
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			visited[i][j] = true;
			backtracking(i, j, map[i][j], 1);
			visited[i][j] = false;
			tetro1(i, j);
			tetro2(i, j);
			tetro3(i, j);
			tetro4(i, j);
		}
	}

	cout << answer << "\n";

	return 0;
}
