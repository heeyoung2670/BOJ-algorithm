//인구 이동
//구현, bfs
#include <iostream>
#include <cstring>
#include <queue>

using namespace std;

int N, L, R;
int map[51][51];
bool visited[51][51];

int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

int bfs(int x, int y) {

	vector<pair<int, int>> v = { {x, y} };
	int person = map[x][y];

	queue<pair<int, int>> q;
	q.push({ x, y });
	visited[x][y] = true;
	
	while (!q.empty())
	{
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
			if (!visited[nx][ny]) { //방문하지 않았고
				if (L <= abs(map[nx][ny] - map[x][y]) && abs(map[nx][ny] - map[x][y]) <= R) { //두 나라의 인구 차이가 L명이상 R명 이하라면
					//연합
					visited[nx][ny] = true;
					q.push({ nx, ny });
					v.push_back({ nx, ny });
					person += map[nx][ny];
				}
			}
		}
	}

	//인구 수 갱신
	person /= v.size();
	for (int i = 0; i < v.size(); i++) {
		map[v[i].first][v[i].second] = person;
	}

	return v.size();
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> L >> R;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
		}
	}

	int answer = 0;
	while (true)
	{
		bool check = true;
		memset(visited, false, sizeof(visited));

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (!visited[i][j]) {
					if (bfs(i, j) != 1) check = false;
				}
			}
		}

		if (check) break;
		answer++;
	}
	
	cout << answer << "\n";

	return 0;
}
