//스타트 택시
//구현, 
#include <iostream>
#include <vector>
#include <queue>
#include <cstring>

using namespace std;

int N, M;
int fuel;
int map[21][21];
int isVisited[21][21];

vector<pair<int, int>> start;
vector<pair<int, int>> dest;
bool isChoice[400] = { false, }; //탑승한 손님 저장

struct Taxi {
	int x; int y;
}taxi; //현재 택시 좌표 저장

struct Person {
	int x, y, cnt, idx;
	Person() {};
	Person(int x, int y, int cnt, int idx) : x(x), y(y), cnt(cnt), idx(idx) {};
	bool operator <(const Person p) const {
		if (p.cnt == cnt) {
			if (p.x == x) return p.y < y;
			return p.x < x;
		}
		return p.cnt < cnt; //오름차순 정렬
	}
};

int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

void bfs(int isVisited[][21]) {
	queue<pair<int, int>> q;

	q.push({ taxi.x, taxi.y }); //현재 택시 위치부터 시작
	isVisited[taxi.x][taxi.y] = 0;
	while (!q.empty())
	{
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
		for (int k = 0; k < 4; k++) {
			int nx = x + dx[k];
			int ny = y + dy[k];
			if (nx < 1 || nx > N || ny < 1 || ny > N) continue;
			if (map[nx][ny] == 1 || isVisited[nx][ny] != -1) continue; //벽이라면 이동 불가능
			isVisited[nx][ny] = isVisited[x][y] + 1; //최단 거리 계산
			q.push({ nx, ny });
		}
	}
}

int choice() {
	priority_queue<Person> pq; //거리, 행, 열 순으로 정렬되는 우선순위 큐

	memset(isVisited, -1, sizeof(isVisited));
	bfs(isVisited);

	for (int i = 0; i < M; i++) {
		if (!isChoice[i]) { //아직 탑승하지 않은 손님
			if(isVisited[start[i].first][start[i].second] == -1) return -1; //택시가 손님까지 이동 불가능
			pq.push(Person(start[i].first, start[i].second, isVisited[start[i].first][start[i].second], i));
		}
	}

	Person p = pq.top(); //현재 택시 위치에서 가장 가까운 손님
	if (p.cnt > fuel) return -1; //손님까지 갈 연료 부족
	else {
		//연료 감소
		fuel -= p.cnt;
		//택시 위치 이동
		taxi.x = p.x;
		taxi.y = p.y;
		//손님 선택
		isChoice[p.idx] = true;

		//목적지 이동
		memset(isVisited, -1, sizeof(isVisited));
		bfs(isVisited);
		if (isVisited[dest[p.idx].first][dest[p.idx].second] == -1) return -1; //택시가 목적지까지 이동 불가능, 연료랑 상관 X
		if (isVisited[dest[p.idx].first][dest[p.idx].second] <= fuel) { //목적지까지의 거리
			//연료 두배 증가
			fuel += isVisited[dest[p.idx].first][dest[p.idx].second];	
			//택시 목적지로 이동
			taxi.x = dest[p.idx].first;
			taxi.y = dest[p.idx].second;
		}
		else return -1; //목적지까지 갈 연료 부족
	}

	return 0;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	//입력
	cin >> N >> M >> fuel;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> map[i][j];
		}
	}

	int x, y;
	cin >> x >> y;
	taxi.x = x;
	taxi.y = y;
	for (int i = 0; i < M ; i++) {
		cin >> x >> y;
		start.push_back({ x, y });
		cin >> x >> y;
		dest.push_back({ x, y });
	}

	//방문할 손님 선택
	for(int i = 0; i < M; i++) {
		if (choice() == -1) { //모든 손님을 이동시킬 수 없는 경우
			cout << -1 << "\n";
			return 0;
		}
	}
	
	cout << fuel << "\n";

	return 0;
}
