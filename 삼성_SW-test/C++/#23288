//주사위 굴리기 2
//구현, bfs
#include <iostream>
#include <queue>

using namespace std;

//오른쪽, 아래쪽, 왼쪽, 위쪽
int dx[4] = { 0, 1, 0, -1 };
int dy[4] = { 1, 0, -1, 0 };

int N, M, K; //세로, 가로, 이동하는 횟수
int map[21][21];
int answer = 0; //획득하는 점수의 합

int dice[6] = {1, 2, 3, 4, 5, 6}; //위, 뒤, 오른쪽, 왼쪽, 앞, 아래

void update(int dir) {
	int up = dice[0];
	int back = dice[1];
	int right = dice[2];
	int left = dice[3];
	int front = dice[4];
	int down = dice[5];

	if (dir == 0) { //오른쪽으로 굴림
		dice[0] = left;
		dice[2] = up;
		dice[3] = down;
		dice[5] = right;
	}
	else if (dir == 1) { //아래쪽으로 굴림
		dice[0] = back;
		dice[1] = down;
		dice[4] = up;
		dice[5] = front;
	}
	else if (dir == 2) { //왼쪽으로 굴림
		dice[0] = right;
		dice[2] = down;
		dice[3] = up;
		dice[5] = left;
	}
	else if (dir == 3) { //위쪽으로 굴림
		dice[0] = front;
		dice[1] = up;
		dice[4] = down;
		dice[5] = back;
	}
}

int bfs(int x, int y) {
	queue<pair<int, int>> q;

	bool visited[21][21] = { false, }; //방문 확인
	int target = map[x][y]; //목표 숫자 저장
	int cnt = 1; //칸의 개수 카운트

	q.push({ x, y });
	visited[x][y] = true;
	while (!q.empty())
	{
		x = q.front().first;
		y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx < 0 || nx >= N || ny < 0 || ny >= M) continue;
			if (visited[nx][ny] || map[nx][ny] != target) continue;
			visited[nx][ny] = true;
			q.push({ nx, ny });
			cnt++;
		}
	}

	return target * cnt;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M >> K;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
		}
	}

	int x = 0, y = 0; //주사위 시작 위치
	int dir = 0; //주사위 이동 방향
	while (K--)
	{
		int nx = x + dx[dir];
		int ny = y + dy[dir];
		if (nx < 0 || nx >= N || ny < 0 || ny >= M) { //이동 방향에 칸이 없다면
			dir = (dir + 2) % 4; //이동 방향 반대로
			x += dx[dir]; y += dy[dir];
			update(dir);
		}
		else {
			x = nx; y = ny;
			update(dir);
		}
		answer += bfs(x, y); //점수 획득
		if (dice[5] > map[x][y]) dir = (dir + 1) % 4; //시계 방향 회전
		else if (dice[5] < map[x][y]) dir = (dir + 3) % 4; //반시계 방향 회전
	}

	cout << answer << "\n";

	return 0;
}
