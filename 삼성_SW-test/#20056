# 마법사 상어와 파이어볼
# 구현, 시뮬레이션
# deque를 이용해서 리스트 구성 -> 같은 인덱스 data[i][j]에 여러 개의 튜플을 넣을 수 있음
from collections import deque

N, M, K = map(int, input().split())
queue = deque()
data = [[deque() for _ in range(N)] for _ in range(N)]
for _ in range(M):
    r, c, m, s, d = map(int, input().split())
    data[r-1][c-1].append((m, s, d))
    queue.append((r-1, c-1))

dir = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]

for _ in range(K):
    temp = []
    for _ in range(len(queue)):
        x, y = queue.popleft()
        for _ in range(len(data[x][y])):
            m, s, d = data[x][y].popleft()
            nx = (x + dir[d][0] * s) % N
            ny = (y + dir[d][1] * s) % N
            temp.append([nx, ny, m, s, d])
    for nx, ny, m, s, d in temp:
        queue.append((nx, ny))
        data[nx][ny].append((m, s, d))

    for i in range(N):
        for j in range(N):
            if len(data[i][j]) >= 2:
                length = len(data[i][j])
                m_, s_, d_ = 0, 0, 0
                odd, even = 0, 0
                for m, s, d in data[i][j]:
                    m_ += m
                    s_ += s
                    if d%2 == 0:
                        even += 1
                    else:
                        odd += 1
                data[i][j] = deque() # 초기화
                if m_ // 5 > 0:
                    if even == length or odd == length:
                        data[i][j].append((m_//5, s_//length, 0))
                        data[i][j].append((m_//5, s_//length, 2))
                        data[i][j].append((m_//5, s_//length, 4))
                        data[i][j].append((m_//5, s_//length, 6))
                    else:
                        data[i][j].append((m_//5, s_//length, 1))
                        data[i][j].append((m_//5, s_//length, 3))
                        data[i][j].append((m_//5, s_//length, 5))
                        data[i][j].append((m_//5, s_//length, 7))

res = 0
for i in range(N):
    for j in range(N):
        if data[i][j]:
            for m, s, d in data[i][j]:
                res += m
print(res)
