//집합의 표현
//union find
#include <iostream>

using namespace std;

int n, m;
int cmd, a, b;
int parent[1000001];

int find(int x) {
	if (parent[x] == x) return x;
	return parent[x] = find(parent[x]); //찾으면서 부모노드를 업데이트 할 수 있도록
}

void uni(int x, int y) {
	parent[find(x)] = find(y);
}

int main() {
	//cin을 빠르게 하기 위함
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;
	//부모노드를 자기 자신으로 초기화
	for (int i = 0; i <= n; i++) {
		parent[i] = i;
	}

	for (int i = 0; i < m; i++) {
		cin >> cmd >> a >> b;
		if (cmd == 0) { //a와 b 집합을 합침
			uni(a, b);
		}
		else { //같은 집합인지 확인
			//부모노드가 같으면 같은 그룹 
			if (find(a) == find(b)) {
				cout << "YES\n";
			}
			else {
				cout << "NO\n";
			}
		}
	}

	return 0;
}
