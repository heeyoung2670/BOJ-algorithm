//행렬 곱셈 순서
//dp
#include<iostream>
#include<algorithm>

using namespace std;

#define INF 987654321

int N;
int r, c;
int matrix[501][2];
int dp[501][501]; //(i, j)일 때, i부터 j번째 행렬까지 곱했을 때의 최솟값 저장

int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//입력
	cin >> N;
	for (int i = 1; i <= N; i++) {
		cin >> r >> c;
		matrix[i][0] = r;
		matrix[i][1] = c;
	}

	//구현
	for (int i = 1; i < N; i++) //구간 범위
	{
		for (int j = 1; j + i <= N; j++) // 시작 지점
		{
			dp[j][j + i] = INF;
			for (int k = j; k <= j + i; k++) //범위를 두 파트로 나눔 -> dp[j][k]와 dp[k+1][j+i]
			{
				//N = matrix[j][0], M = matrix[k][1] = matrix[k+1][0], K = matrix[j+i][1]
				dp[j][j + i] = min(dp[j][j + i], dp[j][k] + dp[k + 1][j + i] + matrix[j][0] * matrix[k][1] * matrix[j + i][1]);
			}
		}

	}

	cout << dp[1][N] << "\n";

	return 0;

}
