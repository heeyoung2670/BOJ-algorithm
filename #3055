// 탈출
#include <iostream>
#include <queue>
#include <algorithm>

using namespace std;

#define MAX 51

int R, C;
char map[MAX][MAX];
bool isVisited[MAX][MAX] = {false, };

queue<pair<int, int>> q;
queue<pair<int, int>> water;

int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

int bfs() {

	int x, y, nx, ny;
	int cnt = 0;

	while (!q.empty())
	{
		cnt++;
		int water_size = water.size();
		while (water_size--)
		{
			x = water.front().first;
			y = water.front().second;
			water.pop();
			for (int k = 0; k < 4; k++) {
				nx = x + dx[k];
				ny = y + dy[k];
				if (0 <= nx && nx < R && 0 <= ny && ny < C) {
					if (map[nx][ny] == 'X' || map[nx][ny] == 'D' || map[nx][ny] == '*') continue;
					water.push(make_pair(nx, ny));
					map[nx][ny] = '*';
				}
			}
		}

		int q_size = q.size();
		while (q_size--)
		{
			x = q.front().first;
			y = q.front().second;
			q.pop();

			isVisited[x][y] = true;
			for (int k = 0; k < 4; k++) {
				nx = x + dx[k];
				ny = y + dy[k];
				if (0 <= nx && nx < R && 0 <= ny && ny < C) {
					if (map[nx][ny] == 'X' || isVisited[nx][ny] || map[nx][ny] == '*') continue;
					if (map[nx][ny] == 'D') {
						cout << cnt << endl;
						return 0;
					}
					isVisited[nx][ny] = true;
					q.push(make_pair(nx, ny));
				}
			}
		}

	}

	cout << "KAKTUS" << endl;
	return 0;
}

int main() {
	
	cin >> R >> C;
	for (int i = 0; i < R; i++) {
		for (int j = 0; j < C; j++) {
			cin >> map[i][j];
			if (map[i][j] == 'S') {
				q.push(make_pair(i, j));
			}
			if (map[i][j] == '*') {
				water.push(make_pair(i, j));
			}
		}
	}

	bfs();

	return 0;
}
